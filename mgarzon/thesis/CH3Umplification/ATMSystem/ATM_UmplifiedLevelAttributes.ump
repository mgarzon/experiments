namespace banking;

class AccountInformation
{
String []  ACCOUNT_NAMES = { "Checking", "Savings",
	    "Money Market" };

    /** 
     * Abbreviations for account names to be printed on receipts.
     */
 String []   ACCOUNT_ABBREVIATIONS = { "CHKG", "SVGS",
	    "MMKT" };
}


namespace banking;

class Balances
{

     Money total;
     Money available;

    public void setBalances(Money total, Money available) {
	this.total = total;
	this.available = available;
    }


    public Money getAvailable() {
	return available;
    }
}

namespace banking;

class Card
{
     Integer number;
}


class Message
{

const Integer WITHDRAWAL = 0;

const Integer  INITIATE_DEPOSIT = 1;

    /** 
     * messageCode value for a message completing a deposit (envelope received).
     */
const Integer  COMPLETE_DEPOSIT = 2;

    /** 
     * messageCode value for a transfer between accounts message
     */
const Integer  TRANSFER = 3;

    /** 
     * messageCode value for an inquiry message
     */
const Integer  INQUIRY = 4;


    Integer messageCode;


    Card card;

    Integer pin;

    Integer serialNumber;

    Integer fromAccount;

    Integer toAccount;
     
  Money amount;

}

namespace banking;

class Money
{

   Integer cents;

    /** 
     * Constructor
     * @param dollars whole dollar amount
     */
    public Money(int dollars) {
	this(dollars, 0);
    }


    public void add(Money amountToAdd) {
	this.cents += amountToAdd.cents;
    }

    /** 
     * Subtract an amount of money from this
     * @param amountToSubtract the amount to subtractPrecondition: amount must be <= this amount
     */
    public void subtract(Money amountToSubtract) {
	this.cents -= amountToSubtract.cents;
    }

    /** 
     * Compare this to another amount
     * @param compareTo the amount to compare to
     * @return true if this amount is <= compareTo amount
     */
    public boolean lessEqual(Money compareTo) {
	return this.cents <= compareTo.cents;
    }
}

namespace banking;

class Receipt
{
  depend java.util.Enumeration;
  depend java.util.Date;
  depend atm.transaction.Transaction;
  depend atm.ATM;
    /** 
     * Heading portion of the receipt - common to all forms of receipt
     */
    String[] headingPortion;

    /** 
     * Transaction details portion of the receipt - specific to each type of transaction, and therefore filled in by subclasses
     */
     String[] detailsPortion;

    /** 
     * Ending balances portion of the receipt - common to all forms of receipt
     */
  String[] balancesPortion;

    /** 
     * Constructor.  This base class constructor will create the portions of the receipt that are common to all types of transaction, and the subclass constructor will create the details portion unique to each type.
     * @param atm the ATM where the transaction was done
     * @param card the card that was used
     * @param transaction the Transaction object for the transaction
     * @param balances Balances object giving final balances for account used
     */
    protected Receipt(ATM atm, Card card, Transaction transaction,
	    Balances balances) {
	headingPortion = new String[4];
	headingPortion[0] = new Date().toString();
	headingPortion[1] = atm.getBankName();
	headingPortion[2] = "ATM #" + atm.getID() + " " + atm.getPlace();
	headingPortion[3] = "CARD " + card.getNumber() + " TRANS #"
		+ transaction.getSerialNumber();
	balancesPortion = new String[2];
	balancesPortion[0] = "TOTAL BAL: " + balances.getTotal();
	balancesPortion[1] = "AVAILABLE: " + balances.getAvailable();
    }

    /** 
     * Get the individual lines to be printed.  Each call to the nextElement() of the enumeration gets one line (as a String)
     */
    public Enumeration getLines() {
	return new Enumeration() {
	    private int portion = 0;
	    private int index = 0;

	    public boolean hasMoreElements() {
		return portion < 2 || index < balancesPortion.length;
	    }

	    public Object nextElement() {
		String line = null;
		switch (portion) {
		case 0:
		    line = headingPortion[index++];
		    if (index >= headingPortion.length) {
			portion++;
			index = 0;
		    }
		    break;
		case 1:
		    line = detailsPortion[index++];
		    if (index >= detailsPortion.length) {
			portion++;
			index = 0;
		    }
		    break;
		case 2:
		    line = balancesPortion[index++];
		    break;
		}
		return line;
	    }
	};
    }
}

namespace banking;

class Status
{
  abstract; 
   
    public abstract boolean isInvalidPIN();

    public abstract String getMessage();
}